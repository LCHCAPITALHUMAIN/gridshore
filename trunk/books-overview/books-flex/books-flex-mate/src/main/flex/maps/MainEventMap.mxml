<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
    <mx:Script><![CDATA[
        import com.asfusion.mate.utils.debug.Debugger;

        import components.*;
        import events.*;
        import managers.*;
        import models.Config;

        [Bindable]
        public var props:Config = new Config();

        ]]></mx:Script>

    <Debugger level="{Debugger.ALL}"/>

    <!-- Remote objects -->
    <mx:RemoteObject id="booksService"
                     endpoint="http://{props.host}:{props.port}/{props.webcontext}/messagebroker/amf"
                     destination="remoteBookManager"/>

    <!-- Event handlers: books -->
    <EventHandlers type="{BooksEvent.OBTAIN_ALL_BOOKS}" debug="true">
        <RemoteObjectInvoker instance="{booksService}" method="obtainAllBooks">
            <resultHandlers>
                <MethodInvoker generator="{BooksManager}" method="storeBooks" arguments="{resultObject}"/>
                <EventAnnouncer generator="{MainNavigationEvent}" type="{MainNavigationEvent.NAVIGATION}">
                    <Properties navigationId="{MainNavigationEvent.ALL_BOOKS}"/>
                </EventAnnouncer>
            </resultHandlers>
        </RemoteObjectInvoker>
    </EventHandlers>

    <EventHandlers type="{BooksEvent.FILTER_BOOKS}" debug="true">
        <MethodInvoker generator="{BooksManager}" method="filterBooks" arguments="{event.bookFilter}"/>
    </EventHandlers>

    <EventHandlers type="{BooksEvent.CLEAR_FILTER_BOOKS}" debug="true">
        <MethodInvoker generator="{BooksManager}" method="clearFilterBooks"/>
    </EventHandlers>

    <EventHandlers type="{BooksEvent.SELECT_CURRENT_BOOK}" debug="true">
        <MethodInvoker generator="{BooksManager}" method="selectCurrentBook" arguments="{event.currentBook}"/>
        <EventAnnouncer generator="{MainNavigationEvent}" type="{MainNavigationEvent.NAVIGATION}">
            <Properties navigationId="{MainNavigationEvent.BOOK_DETAILS}"/>
        </EventAnnouncer>
    </EventHandlers>

    <!-- Event Handlers Security navigation -->
    <EventHandlers type="{AuthenticationEvent.NEEDS}" debug="true">
        <EventAnnouncer generator="{MainNavigationEvent}" type="{MainNavigationEvent.NAVIGATION}">
            <Properties navigationId="{MainNavigationEvent.AUTHENTICATION_FORM}"/>
        </EventAnnouncer>
    </EventHandlers>

    <EventHandlers type="{AuthenticationEvent.AUTHENTICATED}" debug="true">
        <EventAnnouncer generator="{MainNavigationEvent}" type="{MainNavigationEvent.NAVIGATION}">
            <Properties navigationId="{MainNavigationEvent.WELCOME_MESSAGE}"/>
        </EventAnnouncer>
    </EventHandlers>

    <EventHandlers type="{AuthenticationEvent.LOGGEDOUT}" debug="true">
        <EventAnnouncer generator="{MainNavigationEvent}" type="{MainNavigationEvent.NAVIGATION}">
            <Properties navigationId="{MainNavigationEvent.AUTHENTICATION_FORM}"/>
        </EventAnnouncer>
    </EventHandlers>
    

    <!-- Injectors -->
    <Injectors target="{AllBooks}">
        <PropertyInjector source="{BooksManager}" sourceKey="books" targetKey="books"/>
    </Injectors>
    <Injectors target="{BookDetails}">
        <PropertyInjector source="{BooksManager}" sourceKey="currentBook" targetKey="book"/>
    </Injectors>
    <!-- Security injected properties-->
    <Injectors target="{Main}">
        <PropertyInjector source="{AuthenticationManager}" sourceKey="authorizationData" targetKey="authorizationData"/>
    </Injectors>
    
</EventMap>