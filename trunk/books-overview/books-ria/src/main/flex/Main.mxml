<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:myComp="components.*" xmlns:rend="renderers.*" creationComplete="initializeApplication()">
    <mx:Script><![CDATA[
        import events.BookSelectedEvent;
        import events.MainNavigationEvent;
        import events.RemoteExceptionEvent;
        import events.AuthenticationEvent;

        import mx.controls.Alert;

        import org.springextensions.actionscript.context.support.XMLApplicationContext;

        import services.BookService;
        import services.SecurityService;

        [Bindable]
        private var authenticationHelper:SecurityService;

        [Bindable]
        private var bookService:BookService;

        private var _applicationContext:XMLApplicationContext;

        /**
         * Mainly used to set some listeners and parameters on application scope, it also calls the function
         * to present the form to enter credentials for authentication of a user. The successfull authentication
         * events is handled on an application scope, the listener for this events is added here.
         */
        private function initializeApplication():void {
            _applicationContext = new XMLApplicationContext("applicationContext.xml");
            _applicationContext.addEventListener(Event.COMPLETE, onApplicationContextComplete);
            _applicationContext.load();

            Application.application.addEventListener(AuthenticationEvent.AUTHENTICATION, handleAuthenticationEvent);
            Application.application.addEventListener(RemoteExceptionEvent.REMOTE_EXCEPTION, handleRemoteExceptionEvent);
            Application.application.addEventListener(AuthenticationEvent.NEEDS_AUTHENTICATION, handleNeedsAuthenticationEvent);
            showRightUIComponent('initializingMessage');
        }

        private function onApplicationContextComplete(events:Event):void {
            bookService = _applicationContext.getObject("bookService");
            authenticationHelper = _applicationContext.getObject("authenticationService");
            authenticationHelper.isPrincipalAuthenticatedBefore();
        }

        /**
         * Used to present the form where a user can enter his credentials and ask for authentication
         */
        private function handleNeedsAuthenticationEvent(events:AuthenticationEvent):void {
            showRightUIComponent('authentication');
        }

        /**
         * Called when a NavigationEvent is dispatched, based on the events, the right UIComponent is created
         * and presented in the main panel.
         * @param events NavigationEvent thrown when a user clicks a menu item (by example)
         */
        private function handleNavigationEvent(events:MainNavigationEvent):void {
            showRightUIComponent(event.clickedItem);
        }

        /**
         * This method is called after a succesfull authentication request. It initializes the application
         * for normal use by adding navigation and other global items.
         * @param events
         */
        private function handleAuthenticationEvent(events:AuthenticationEvent):void {
            mainNavigation.initMyComponent();
            mainNavigation.addEventListener(MainNavigationEvent.SELECT_ITEM, handleNavigationEvent);
            filteredBooks.addEventListener(BookSelectedEvent.SELECT_BOOK, handleBookSelectedEvent);
            showRightUIComponent("default");
        }

        /**
         * Used to handle a BookSelectedEvent. Result must be the book form with the data of the selected book.
         * @param events : BookSelectedEvent
         * @return void
         */
        private function handleBookSelectedEvent(events:BookSelectedEvent):void {
            bookForm.book = event.selectedBook;
            showRightUIComponent('selectedbook');
        }

        /**
         * Called when a remote exception is catched, for now we only show the error message
         * @param events : RemoteExceptionEvent
         * @return void
         */
        private function handleRemoteExceptionEvent(events:RemoteExceptionEvent):void {
            Alert.show(event.message);
        }

        /**
         * Used to select the item o show from the stack of items
         * @param itemToShow : String
         * @return void
         */
        private function showRightUIComponent(itemToShow:String):void {
            switch (itemToShow) {
                case 'authentication':
                    mainContentViewStack.selectedChild = authenticationForm;
                    break;
                case 'allbooks' :
                    mainContentViewStack.selectedChild = filteredBooks;
                    break;
                case 'selectedbook' :
                    mainContentViewStack.selectedChild = bookForm;
                    break;
                case 'newbook' :
                    bookForm.clearForm();
                    mainContentViewStack.selectedChild = bookForm;
                    break;
                case 'initializingMessage' :
                    mainContentViewStack.selectedChild = initializingMessage;
                    break;
                default:
                    mainContentViewStack.selectedChild = welcomeMessage;
            }
        }

        ]]>
    </mx:Script>

    <mx:ApplicationControlBar dock="true" id="menuDock">
        <myComp:MainNavigationComponent id="mainNavigation"/>
    </mx:ApplicationControlBar>

    <mx:Panel id="myMainContentPanel" title="My Books demo app" status="Welcome" width="90%" height="90%">
        <mx:ViewStack id="mainContentViewStack" width="100%" height="100%">
            <mx:HBox id="initializingMessage">
                <mx:Label text="initializing ..."/>
            </mx:HBox>
            <myComp:AuthenticationForm id="authenticationForm" securityService="{authenticationHelper}"/>
            <myComp:FilteredBooks id="filteredBooks" bookService="{bookService}"/>
            <myComp:BookForm id="bookForm" bookService="{bookService}"/>
            <mx:HBox id="welcomeMessage">
                <mx:Label id="welcomeLabel" text="Welcome"/>
            </mx:HBox>
        </mx:ViewStack>
    </mx:Panel>
</mx:Application>